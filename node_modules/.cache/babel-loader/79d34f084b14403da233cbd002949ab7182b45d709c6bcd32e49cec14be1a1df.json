{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/api'; // Adjust URL if necessary\n\n// Create an axios instance for API calls\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true // Required for Sanctum's CSRF protection\n});\n\n// Intercept request to include token automatically if it exists\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// User login\nexport const loginUser = (email, password) => {\n  return axiosInstance.post('/login', {\n    email,\n    password\n  });\n};\n\n// User registration\nexport const registerUser = (name, email, password, password_confirmation) => {\n  return axiosInstance.post('/register', {\n    name,\n    email,\n    password,\n    password_confirmation\n  });\n};\n\n// Fetch current logged-in user\nexport const fetchUser = () => {\n  return axiosInstance.get('/user');\n};\n\n// User logout\nexport const logoutUser = () => {\n  return axiosInstance.post('/logout');\n};","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","loginUser","email","password","post","registerUser","name","password_confirmation","fetchUser","get","logoutUser"],"sources":["C:/wamp64/www/ica/resources/js/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000/api'; // Adjust URL if necessary\r\n\r\n// Create an axios instance for API calls\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    withCredentials: true, // Required for Sanctum's CSRF protection\r\n});\r\n\r\n// Intercept request to include token automatically if it exists\r\naxiosInstance.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n// User login\r\nexport const loginUser = (email, password) => {\r\n    return axiosInstance.post('/login', { email, password });\r\n};\r\n\r\n// User registration\r\nexport const registerUser = (name, email, password, password_confirmation) => {\r\n    return axiosInstance.post('/register', { name, email, password, password_confirmation });\r\n};\r\n\r\n// Fetch current logged-in user\r\nexport const fetchUser = () => {\r\n    return axiosInstance.get('/user');\r\n};\r\n\r\n// User logout\r\nexport const logoutUser = () => {\r\n    return axiosInstance.post('/logout');\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,SAAS,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC1C,OAAOf,aAAa,CAACgB,IAAI,CAAC,QAAQ,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,qBAAqB,KAAK;EAC1E,OAAOnB,aAAa,CAACgB,IAAI,CAAC,WAAW,EAAE;IAAEE,IAAI;IAAEJ,KAAK;IAAEC,QAAQ;IAAEI;EAAsB,CAAC,CAAC;AAC5F,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC3B,OAAOpB,aAAa,CAACqB,GAAG,CAAC,OAAO,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC5B,OAAOtB,aAAa,CAACgB,IAAI,CAAC,SAAS,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}