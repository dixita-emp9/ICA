{"ast":null,"code":"// src/services/apiService.js\n\nimport axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/api'; // Adjust URL if necessary\n\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  withCredentials: true // Required for Sanctum's CSRF protection\n});\nexport const loginUser = (email, password) => {\n  return axiosInstance.post('/login', {\n    email,\n    password\n  });\n};\nexport const registerUser = (name, email, password, password_confirmation) => {\n  return axiosInstance.post('/register', {\n    name,\n    email,\n    password,\n    password_confirmation\n  });\n};\nexport const fetchUser = () => {\n  return axiosInstance.get('/users');\n};\nexport const fetchCurrentUser = async () => {\n  try {\n    const response = await axiosInstance.get('/user');\n    return response.data; // Assuming response.data contains the user information\n  } catch (error) {\n    if (error.response) {\n      console.error('Error fetching current user:', error.response.data.message);\n    } else {\n      console.error('Error fetching current user:', error.message);\n    }\n    throw error; // Re-throw error to handle it in the component\n  }\n};\nexport const logoutUser = () => {\n  return axiosInstance.post('/logout');\n};","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","withCredentials","loginUser","email","password","post","registerUser","name","password_confirmation","fetchUser","get","fetchCurrentUser","response","data","error","console","message","logoutUser"],"sources":["C:/wamp64/www/ica/resources/js/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000/api'; // Adjust URL if necessary\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    withCredentials: true, // Required for Sanctum's CSRF protection\r\n});\r\n\r\nexport const loginUser = (email, password) => {\r\n    return axiosInstance.post('/login', { email, password });\r\n};\r\n\r\nexport const registerUser = (name, email, password, password_confirmation) => {\r\n    return axiosInstance.post('/register', { name, email, password, password_confirmation });\r\n};\r\n\r\nexport const fetchUser = () => {\r\n    return axiosInstance.get('/users');\r\n};\r\n\r\nexport const fetchCurrentUser = async () => {\r\n    try {\r\n        const response = await axiosInstance.get('/user');\r\n        return response.data; // Assuming response.data contains the user information\r\n    } catch (error) {\r\n        if (error.response) {\r\n            console.error('Error fetching current user:', error.response.data.message);\r\n        } else {\r\n            console.error('Error fetching current user:', error.message);\r\n        }\r\n        throw error; // Re-throw error to handle it in the component\r\n    }\r\n};\r\n\r\nexport const logoutUser = () => {\r\n    return axiosInstance.post('/logout');\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC1C,OAAON,aAAa,CAACO,IAAI,CAAC,QAAQ,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;AAC5D,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,qBAAqB,KAAK;EAC1E,OAAOV,aAAa,CAACO,IAAI,CAAC,WAAW,EAAE;IAAEE,IAAI;IAAEJ,KAAK;IAAEC,QAAQ;IAAEI;EAAsB,CAAC,CAAC;AAC5F,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC3B,OAAOX,aAAa,CAACY,GAAG,CAAC,QAAQ,CAAC;AACtC,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMd,aAAa,CAACY,GAAG,CAAC,OAAO,CAAC;IACjD,OAAOE,QAAQ,CAACC,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACF,QAAQ,EAAE;MAChBG,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACF,QAAQ,CAACC,IAAI,CAACG,OAAO,CAAC;IAC9E,CAAC,MAAM;MACHD,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAChE;IACA,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAM;EAC5B,OAAOnB,aAAa,CAACO,IAAI,CAAC,SAAS,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}